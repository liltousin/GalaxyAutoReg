import os
import random
import string
import time

import requests
from dotenv import load_dotenv

load_dotenv()


BESTPROXIES_APIKEY = os.getenv("BESTPROXIES_APIKEY")


def get_new_unused_proxies():
    headers = requests.utils.default_headers()

    headers.update({"User-Agent": "My User Agent 1.0"})

    result = requests.get(f"https://api.best-proxies.ru/proxylist.txt?key={BESTPROXIES_APIKEY}&uptime=1&limit=0", headers=headers)
    # print(result.text)
    # {"error":{"code":403,"message":"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –æ–∫–æ–Ω—á–µ–Ω, –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á"}}
    with open("conf_reg_proxies.txt") as file:
        conf_reg_proxies = [i.rstrip() for i in file.readlines()]
    data = list(
        filter(
            lambda x: len(x.split(":")) == 2
            and all(c in "0123456789" for c in x.rstrip().split(":")[1])
            and all(all(s in "0123456789" for s in c) for c in x.rstrip().split(":")[0].split("."))
            and x not in conf_reg_proxies,
            result.text.split(),
        )
    )
    random.shuffle(data)
    return data


def generate_text(tg_username: str, text_template: str):
    replacements = {  # 100% 1 –≤ 1
        "–ô": "–ô –òÍôº",
        "–ö": "K ùñ™ ‚≤î Íìó Œö –ö",
        "–ï": "E Œï –ï êäÜ Íì∞ ‚¥π",
        "–ù": "H ùñß ‚≤é êãè Œó –ù Íìß ·ïº",
        "–ì": "Œì –ì ñºá",
        "–ó": "Íû´ –ó",
        "–•": "êäê X ‚µù –• Œß ‚Ö© Íì´ ‚≤¨ ·ô≠ êä¥ ·ö∑ ùñ∑",
        "–§": "’ì –§ Œ¶ ‚≤™",
        "–í": "B Íìê Œí –í ùñ° êäÇ êä°",
        "–ê": "A ùñ† –ê Œë ñΩÄ ÍìÆ êä†",
        "–ü": "Œ† ‚≤† –ü",
        "–†": "ùñØ P –† Œ°",
        "–û": "O –û Œü êêÑ",
        "–°": "C –° ‚Ö≠ œπ",
        "–ú": "ùñ¨ M Œú –ú Íìü ‚ÖØ œ∫",
        "–¢": "ùñ≥ êäó üù® T Íìî ñºä –¢ Œ§ êä± ë¢º",
        "–π": "êëçÍôº –π ·¥éÍôº",
        "—É": "—É ùóí y",
        "–∫": "·¥ã ‚≤ï ƒ∏ Œ∫ –∫",
        "–µ": "e ùñæ –µ",
        "–Ω": " ú –Ω",
        "–≥": "·¥¶ –≥",
        "–∑": "–∑ ·¥à",
        "—Ö": "—Ö ùóë x ‚Öπ",
        "—Ñ": "—Ñ œï",
        "–≤": "–≤  ô",
        "–∞": "a –∞",
        "–ø": "·¥® –ø",
        "—Ä": "—Ä p",
        "–æ": "êì™ ‚≤ü ùóà –æ Œø êê¨ o ·Éø",
        "–ª": "–ª ·¥´",
        "—ë": "√´ —ë",
        "—è": "·¥ô —è",
        "—Å": "—Å c ·¥Ñ œ≤ ùñº ‚ÖΩ",
        "–º": "–º ·¥ç",
        "–∏": "–∏ ·¥é",
        "—Ç": "—Ç ·¥õ",
    }
    message = ""
    # total_variants = 1
    for char in text_template:
        if char in replacements:
            message += random.choice(replacements[char].split(" "))
            # total_variants *= len(replacements[char].split(" "))
        else:
            message += char
    # print(total_variants)
    return message.replace("{}", tg_username)


def generate_nickname(tg_username: str):
    possible_characters = string.ascii_letters + string.digits + "[]/^{}_=`"
    print(len(possible_characters))
    if 14 - len(tg_username) > 3:
        random_characters = "".join(
            [random.choice(possible_characters)] + [random.choice(possible_characters + "-") for _ in range(14 - len(tg_username) - 1)]
        )
        n = random.randint(0, len(random_characters))
        if n == 0:
            return tg_username + random.choice("[]/^{}_=`-") + random_characters[n + 1 :]
        if n == 1:
            return random.choice("[]/^{}_=`") + tg_username + random.choice("[]/^{}_=`-") + random_characters[n + 1 :]
        if n == len(random_characters) - 1:
            return random_characters[: n - 1] + random.choice("[]/^{}_=`-") + tg_username + random.choice("[]/^{}_=`-")
        if n == len(random_characters):
            return random_characters[: n - 1] + random.choice("[]/^{}_=`-") + tg_username
        return random_characters[: n - 1] + random.choice("[]/^{}_=`-") + tg_username + random.choice("[]/^{}_=`-") + random_characters[n + 1 :]
    return "".join([random.choice(possible_characters)] + [random.choice(possible_characters + "-") for _ in range(13)])


def get_quarter_of_day(current_time: time.struct_time) -> int:
    hour = int(time.strftime("%H", current_time))
    if 6 <= hour < 12:
        return 2
    elif 12 <= hour < 18:
        return 3
    elif 18 <= hour < 24:
        return 4
    return 1


def get_statistic_row(
    city: str, good_messages: int, message_attempts: int, current_date_and_time=time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), process_id=0
) -> str:
    # messages_per_minute = str(round((message_attempts) / ((city_end - city_start) / 60), 2)).replace(".", ",")
    return f"{city},{good_messages},{message_attempts},{current_date_and_time},{process_id}"


def choose_city_by_statistic() -> str:
    current_quarter_of_day = get_quarter_of_day(time.localtime())
    with open("statistic.csv") as file:
        # –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –≤ —Ç–µ–æ—Ä–∏–∏ –ø–æ —á–∞—Å—É –¥–µ–ª–∞—Ç—å –∞ –Ω–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        # –∞ —á—Ç–æ –µ—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —á–∞—Å –∏–ª–∏ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∏–∑ —Ç—Ä–µ—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —á–∞—Å
        quarter_of_day_statistics = list(
            filter(
                lambda x: int(get_quarter_of_day(time.strptime(x[3], "%Y-%m-%d %H:%M:%S"))) == current_quarter_of_day,
                map(lambda x: x.rstrip().split(","), file.readlines()[1:]),
            )
        )
    city_probabilities = list(
        set(
            map(
                lambda x: (
                    x[0],
                    (
                        sum(map(lambda y: int(y[1]), filter(lambda y: x[0] == y[0], quarter_of_day_statistics)))
                        / sum(map(lambda y: int(y[2]), filter(lambda y: x[0] == y[0], quarter_of_day_statistics)))
                    )
                    * 100,
                ),
                quarter_of_day_statistics,
            )
        )
    )
    city_names = (
        "–ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ß–µ–ª—è–±–∏–Ω—Å–∫, –°–∞–º–∞—Ä–∞, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, "
        + "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –û–º—Å–∫, –í–æ—Ä–æ–Ω–µ–∂, –ü–µ—Ä–º—å, –í–æ–ª–≥–æ–≥—Ä–∞–¥, –°–∞—Ä–∞—Ç–æ–≤, –¢—é–º–µ–Ω—å, –¢–æ–ª—å—è—Ç—Ç–∏, –ú–∞—Ö–∞—á–∫–∞–ª–∞, –ë–∞—Ä–Ω–∞—É–ª, –ò–∂–µ–≤—Å–∫, –•–∞–±–∞—Ä–æ–≤—Å–∫, –£–ª—å—è–Ω–æ–≤—Å–∫, –ò—Ä–∫—É—Ç—Å–∫, "
        + "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –Ø—Ä–æ—Å–ª–∞–≤–ª—å, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å, –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å, –¢–æ–º—Å–∫, –ö–µ–º–µ—Ä–æ–≤–æ, –ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã, –û—Ä–µ–Ω–±—É—Ä–≥, –ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫, –ë–∞–ª–∞—à–∏—Ö–∞, –†—è–∑–∞–Ω—å, –ß–µ–±–æ–∫—Å–∞—Ä—ã, "
        + "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, –ü–µ–Ω–∑–∞, –õ–∏–ø–µ—Ü–∫, –ö–∏—Ä–æ–≤, –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, –¢—É–ª–∞, –°–æ—á–∏, –ö—É—Ä—Å–∫, –£–ª–∞–Ω-–£–¥—ç, –°—É—Ä–≥—É—Ç, –¢–≤–µ—Ä—å, –ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫, –ë—Ä—è–Ω—Å–∫, –Ø–∫—É—Ç—Å–∫, –ò–≤–∞–Ω–æ–≤–æ, "
        + "–í–ª–∞–¥–∏–º–∏—Ä, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, –ì—Ä–æ–∑–Ω—ã–π, –ß–∏—Ç–∞, –ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª, –ö–∞–ª—É–≥–∞, –ë–µ–ª–≥–æ—Ä–æ–¥, –í–æ–ª–∂—Å–∫–∏–π, –ü–æ–¥–æ–ª—å—Å–∫, –í–æ–ª–æ–≥–¥–∞, –°–∞—Ä–∞–Ω—Å–∫, –°–º–æ–ª–µ–Ω—Å–∫, –ö—É—Ä–≥–∞–Ω, –ß–µ—Ä–µ–ø–æ–≤–µ—Ü, "
        + "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫, –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑, –û—Ä—ë–ª, –ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫, –ô–æ—à–∫–∞—Ä-–û–ª–∞, –°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫, –ú—ã—Ç–∏—â–∏, –ú—É—Ä–º–∞–Ω—Å–∫, –ö–æ—Å—Ç—Ä–æ–º–∞, –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫, –•–∏–º–∫–∏, –¢–∞–º–±–æ–≤, –ù–∞–ª—å—á–∏–∫, "
        + "–¢–∞–≥–∞–Ω—Ä–æ–≥, –ù–∏–∂–Ω–µ–∫–∞–º—Å–∫, –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫, –õ—é–±–µ—Ä—Ü—ã, –ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫, –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ, –ö–æ—Ä–æ–ª—ë–≤, –≠–Ω–≥–µ–ª—å—Å, –í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –®–∞—Ö—Ç—ã, –ë—Ä–∞—Ç—Å–∫, "
        + "–°—ã–∫—Ç—ã–≤–∫–∞—Ä, –ê–Ω–≥–∞—Ä—Å–∫, –°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª, –î–∑–µ—Ä–∂–∏–Ω—Å–∫, –ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫, –û—Ä—Å–∫, –û–¥–∏–Ω—Ü–æ–≤–æ, –ü—Å–∫–æ–≤, –ê–±–∞–∫–∞–Ω, –ê—Ä–º–∞–≤–∏—Ä, –ë–∞–ª–∞–∫–æ–≤–æ"
    ).split(", ")
    all_city_probabilities = []
    for i in city_names:
        t = (i, 100)
        for j in city_probabilities:
            if i == j[0]:
                t = j
                break
        if t[1] == 0:
            t = (t[0], 1)
        all_city_probabilities.append(t)
    # k = 2.71828182846 TODO: —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    k = 1
    return random.choices([i[0] for i in all_city_probabilities], [i[1] ** (k) for i in all_city_probabilities])[0]


if __name__ == "__main__":
    # print(get_text(input()))
    # print(generate_text(input(), input()))
    data = get_new_unused_proxies()

    with open("proxylist.txt", "w") as file:
        file.write(("\n".join(data) + "\n"))
